# SPDX-License-Identifier: EUPL-1.2
# SPDX-FileCopyrightText: 2023-present J端rgen M端lbert <juergen.muelbert@outlook.de>
#
[build-system]
build-backend = "hatchling.build"
requires      = ["hatchling"]

[project]
authors = [{ name = "J端rgen M端lbert", email = "juergen.muelbert@outlook.de" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["typer~=0.17", "rich~=14.1", "babel~=2.17", "pyside6~=6.9"]
description = ''
dynamic = ["version"]
keywords = []
license = "EUPL-1.2"
name = "jm-python-template"
readme = "README.md"
requires-python = ">=3.11"

[project.urls]
Changelog     = "https://github.com/jmuelbert//jm-python-template/blob/main/CHANGELOG.md"
Documentation = "https://jmuelbert.github.io/jm-python-template/"
Homepage      = "https://github.com/jmuelbert//jm-python-template"
Issues        = "https://github.com/jmuelbert//jm-python-template/issues"
Repository    = "https://github.com/jmuelbert//jm-python-template.git"
Source        = "https://github.com/jmuelbert//jm-python-template"

[tool.hatch.version]
path = "src/jm_python_template/__about__.py"

[project.optional-dependencies]
dependencies = [
  "mkdocs~=1.6",
  "mkdocs-material[imaging]~=9.6",
  "mkdocs-awesome-pages-plugin~=2.1",
  "mkdocs-git-revision-date-localized-plugin~=1.4",
  "mkdocs-glightbox~=0.5",
  "mkdocs-include-markdown-plugin~=7.1",
  "mkdocs-section-index~=0.3.0",
  "mkdocs-static-i18n~=1.3",
  "mkdocs-typer2~=0.1",
  "mkdocstrings[python]~=0.3",
  "mike~=2.1",
  "jm-reusable-scripts @ git+https://github.com/jmuelbert/jm-reusable-scripts.git",
]

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.dev]
dependencies = [
  "ruff~=0.12",
  "taplo~=0.9",
  "pre-commit~=4.3",
  "pyright~=1.1",
  "reuse~=5.1",
  "pytest~=8.0",
]
installer = "uv"
[tool.hatch.envs.dev.scripts]
check  = "ruff check ."
fix    = "ruff check . --fix"
format = ["ruff check . --fix", "ruff format .", "taplo format"]
lint   = ["ruff check .", "pyright", "reuse lint", "pre-commit run --all-files"]
precommit = ["pre-commit {args}"]
typing    = ["pyright {args}"]

[tool.hatch.entry_points."console_scripts"]
main = "jm_python_template.main"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
macos-max-compat = true
packages         = ["src/jm_python_template"]

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/scripts"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.11", "3.12", "3.13"]

[tool.hatch.envs.hatch-test]
extra-dependencies = [
  "pytest-sugar~=1.1",
  "pytest-timeout~=2.4",
  "xdoctest~=1.2",
]
parallel = true
randomize = true
retries = 2


[tool.pytest.ini_options]
addopts = [
  "-q",
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--doctest-modules",
  "--xdoctest",
]
filterwarnings = ["error"]
markers = [
  "unit: mark a test as a unit test",
  "integration: mark a test as an integration test",
  "e2e: mark a test as an end-to-end test",
  "component: mark a test as a component test",
  "slow: mark a test as slow",
  "smoke: mark a test as a smoke test",
  "regression: mark a test as a regression test",
]
minversion = "6.0"
testpaths = ["tests"]
timeout = "300"

[tool.coverage.run]
branch      = true
omit        = ["src/jm_python_template/__about__.py"]
parallel    = true
source_pkgs = ["jm_python_template", "tests"]

[tool.coverage.paths]
jm_python_template = [
  "src/jm_python_template",
  "*/jm_python_template/src/jm_python_template",
]
tests = ["tests", "*/jm_python_template/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
fail_under    = 50
show_missing  = true

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs~=1.6",
  "mkdocs-material[imaging]~=9.6",
  "mkdocs-awesome-pages-plugin~=2.1",
  "mkdocs-git-revision-date-localized-plugin~=1.4",
  "mkdocs-glightbox~=0.5",
  "mkdocs-include-markdown-plugin~=7.1",
  "mkdocs-section-index~=0.3.0",
  "mkdocs-static-i18n~=1.3",
  "mkdocs-typer2~=0.1",
  "mkdocstrings[python]~=0.3",
  "mike~=2.1",
  "jm-reusable-scripts @ git+https://github.com/jmuelbert/jm-reusable-scripts.git",
]

[tool.hatch.envs.docs.scripts]
build = [
  "mkdocs build --clean --strict {args}",
  "python -m json.tool --sort-keys --no-indent ./site/search/search_index.json ./site/search/search_index.json",
]
qualitycheck = "doc-quality-check"
serve = "mkdocs serve --dev-addr localhost:8090 {args}"

[tool.ruff]
# The target Python version.
line-length    = 88
target-version = "py312"

[tool.ruff.format]
docstring-code-format     = true
indent-style              = "space"
line-ending               = "lf"
preview                   = true
quote-style               = "double"
skip-magic-trailing-comma = false


[tool.ruff.lint]
# Select all available rules and then explicitly ignore those not desired.
# This ensures new rules are automatically picked up unless ignored.
select = ["ALL"]

# Rules to ignore.
ignore = [
  # Docstring rules (D): Generally ignored for brevity or handled by other tools.
  "D100",
  "D101",
  "D103",
  "D104",
  "D105",
  "D107", # Missing docstrings
  "D203",
  "D212",
  "D213", # Blank lines/summary position
  # "D406", "D407", "D413", "D416", "D417", # Section formatting/missing descriptions

  # Type annotation rules (ANN): Rely on dedicated type checker (e.g., MyPy).
  "ANN401", # Disallowed Any

  # Pylint rules (PL):
  "PLR0913", # Too many arguments
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches (complexity, covered by C901 often)
  "PLW0603", # Using the global statement
  "PLR0402", # Consider using a generator instead of a list comprehension
  "PLW2901", # Loop variable `X` overwritten by assignment
  "PLW1514", # Using `open` without explicit encoding
  "PLW0120", # Else clause on loop without a break statement
  "PLW0602", # Using `global` statement

  # Security rules (S): High false positive rates for linting; prefer dedicated security scanners.
  "S101", # Use of `assert`
  "S301",
  "S307",
  "S311", # Insecure modules/functions (pickle, eval, random)
  "S603",
  "S607",
  "S608",
  "S609",
  "S701", # Subprocess, hardcoded password, yaml.load

  # Other common ignores (often handled by formatter, or subjective):
  "E501",   # Line too long (handled by `ruff format`)
  "COM812", # Missing trailing comma (handled by `ruff format`)
  "ISC001", # Implicit string concatenation (handled by `ruff format`)
  "W191",   # Indentation contains tabs (formatter ensures spaces)
  "ERA001", # Commented out code
  "UP006",  # dict.keys() == other_dict.keys() should be dict.keys() == other_dict.keys()
  # If you want to enable these, remove from ignore:
  # "UP007", # Use X | Y for type hints in Python 3.10+
  # "UP009", # Use `X` instead of `typing.X`
  # "UP010", # Unnecessary `else` after `return`
  # "UP038", # `f""` instead of `"{}".format()`
  # "UP039", # Use `tuple` instead of `(X,)` for single-element tuples
  # "UP040", # Use `.` instead of `os.path.join`
  # "UP041", # Use `Path.joinpath` instead of `Path / "child"`
  # Pytest rules (PT): Ignore if you prefer non-snake_case for fixtures.
  "PT006",
  "PT007",
  "PT013",
  "PT015",

  # Relative imports (TID252): Can be useful in some package structures.
  "TID252",
  "Q000",   # This one is often specific and might not be universally applicable for ignoring.
]

[tool.ruff.lint.per-file-ignores]
"**/migrations/*.py" = ["F401", "E501", "D", "PL"]
"__init__.py"        = ["F401", "D"]
"resources_rc.py"    = ["N802"]
"scripts/*.py"       = ["T20"]
"tests/*.py"         = ["S101", "D", "ANN"]

[tool.ruff.lint.isort]
# Ensure imports are organized consistently.
# Replace "your_package_name" with the actual top-level package name(s) of your project.
# This helps isort correctly group your internal imports.
combine-as-imports = true                 # Combine imports like `import os, sys` into `import os; import sys`
force-single-line  = false                # Set to true if you prefer all imports on a single line
known-first-party  = ["jm_python_config"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.gitleaks]
allow-paths  = ["assets/translations/**", "LICENSES/**", "tests/**"]
enable-rules = ["generic-api-key", "python-password", "pyside-secret"]

[tool.markdownlint]
config_file = ".markdownlint.json" # Specify the config file

[tool.yamllint]
extends = "default"
format  = "parsable"
ignore  = [".github/workflows/", "LICENSES/", "assets/translations/"]
strict  = true

[tool.yamllint.rules]
braces          = { max-spaces-inside = 1 }
brackets        = { max-spaces-inside = 1 }
colons          = { max-spaces-after = 1, min-spaces-after = 1 }
commas          = { max-spaces-after = 1, min-spaces-after = 0 }
comments        = { level = "warning", require-explanation = false, min-spaces-from-content = 1 }
document-start  = "enable"
empty-lines     = { max-end = 0, max-start = 0 }
empty-values    = { forbid-in-inline = true }
indentation     = { spaces = 2, check-multi-line-strings = true }
key-duplicates  = "enable"
line-length     = { max = 100, allow-non-breakable-inline-mappings = true }
new-lines       = { type = "unix" }
quoted-strings  = { quote-type = "double", required = false }
trailing-spaces = "enable"
truthy          = { allowed-values = ["true", "false"] }

[tool.pyright]
# Specify the directories or files to check
include = ["src", "tests"]
# Exclude specific files or directories
exclude = [
  "src/some_module.py", # Exclude specific files
]

# Specify type checking mode
typeCheckingMode = "strict" # Options: "off", "basic", "strict"

# Specify additional options
reportGeneralTypeIssues = true
reportMissingImports    = true
reportUnusedFunction    = true
reportUnusedImports     = true
reportUnusedVariable    = true

[tool.taplo]
format = { check = true, write = true }
lint   = { check = true }

[tool.black]
line-length    = 88
target-version = ["py311"]

[tool.isort]
known_first_party = ["jm_python_template"]
line_length       = 88
multi_line_output = 3
profile           = "black"

[tool.xdoctest]
style = "google"
