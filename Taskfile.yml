---
# SPDX-License-Identifier: EUPL-1.2
# SPDX-FileCopyrightText: 2025-present Jürgen Mülbert <juergen.muelbert@outlook.de>

version: "3"

vars:
  LOG: warn
  DOMAIN: jm_python_template
  SRC_DIR: src
  LOCALES_DIR: "{{.SRC_DIR}}/{{.DOMAIN}}/locales"
  GUI_DIR: "{{.SRC_DIR}}/{{.DOMAIN}}/gui"
  GUI_TRANSLATIONS_DIR: "{{.GUI_DIR}}/translations"
  LANGUAGES: en es fr de it pt pt_BR ru zh_CN zh_TW ja ko hi tr ar vi pl nl sv
  PYTHON: python3

tasks:
  default:
    desc: Lists all available tasks
    cmds:
      - task --list

  # ----------------------
  # Code Quality & Linting
  # ----------------------
  lint-docs:
    desc: Run linting checks for documentation
    cmds:
      - pnpm run lint:docs
    silent: true

  lint-code:
    desc: Run code linting (Ruff, Taplo, YAML, etc.)
    cmds:
      - hatch run dev:pre-commit run --all-files

  lint:
    desc: Run all linting (code + docs)
    cmds:
      - task: lint-code
      - task: lint-docs

  format:
    desc: Run formatting hooks (Prettier, Ruff, Taplo, Black)
    cmds:
      - pnpm run format
      - hatch run dev:precommit run --all-files --hook-stage manual --all-files

  # ----------------------
  # Testing & Coverage
  # ----------------------
  test:
    desc: Run all tests with pytest
    cmds:
      - hatch test --all

  coverage:
    desc: Run tests with coverage report
    cmds:
      - hatch test --cover --all

  # ----------------------
  # Environment Cleanup
  # ----------------------
  clean:
    desc: Clean caches, builds, and translation files
    cmds:
      - rm -rf dist build htmlcov site .cache .ropeproject
      - rm -rf .pytest_cache .mypy_cache .ruff_cache .venv
      - rm -f coverage.xml uv.lock .coverage
      - rm -rf {{.LOCALES_DIR}}/*/LC_MESSAGES/*.mo
      - rm -rf {{.LOCALES_DIR}}/*/LC_MESSAGES/*.po
      - rm -rf {{.GUI_TRANSLATIONS_DIR}}/*.ts {{.GUI_TRANSLATIONS_DIR}}/*.qm
      - rm -f {{.GUI_DIR}}/resources_rc.py
      - hatch run dev:precommit clean
      - hatch env prune || true

  reset:
    desc: Reset environment including hooks
    cmds:
      - task: clean
      - hatch env remove default
      - hatch env create
      - task: hooks:install
      - task: pnpm:install

  # ----------------------
  # Pre-commit Hooks
  # ----------------------
  hooks:install:
    desc: Install pre-commit hooks
    cmds:
      - hatch run dev:precommit install
      - hatch run dev:precommit install --hook-type commit-msg

  hooks:update:
    desc: Update pre-commit hooks
    cmds:
      - hatch run dev:precommit autoupdate

  # ----------------------
  # Node/pnpm
  # ----------------------
  pnpm:install:
    desc: Install Node.js and pnpm
    cmds:
      - pnpm install

  pnpm:update:
    desc: Update Node.js and pnpm
    cmds:
      - pnpm update

  # ----------------------
  # Documentation
  # ----------------------
  spell-check:
    desc: Check spelling in documentation
    cmds:
      - pnpm run lint:spell

  update-project-words:
    desc: Update project words
    cmds:
      - pnpm run cspell:project-words

  serve:
    desc: Serve docs locally
    cmds:
      - hatch env create docs
      - hatch run docs:serve

  docs-build:
    desc: Build documentation
    cmds:
      - hatch env create docs
      - hatch run docs:build

  # ----------------------
  # Translations (Cross-Platform)
  # ----------------------
  extract-qt-translations:
    desc: Extract Qt translation strings
    cmds:
      # yamllint disable rule:indentation
      - cmd: |
          echo "Extracting Qt translations (.ts)..."
          if [ -d "{{.GUI_TRANSLATIONS_DIR}}" ]; then
            for lang in {{.LANGUAGES}}; do
              echo "Extract Qt translations for $lang..."
              ts_file="{{.GUI_TRANSLATIONS_DIR}}/${lang}.ts"
              if [ ! -f "${ts_file}" ]; then
                echo '<?xml version="1.0" encoding="utf-8"?><!DOCTYPE TS><TS version="2.1" language="'"${lang}"'"></TS>' > "${ts_file}"
              fi
              hatch run pyside6-lupdate $(find "{{.GUI_DIR}}" -name '*.py') -ts "${ts_file}"
            done
          else
            echo "Can't run GUI translations, there's no gui."
          fi
        platforms: [darwin, linux]
      - cmd: |
          Write-Host "Extracting Qt translations (.ts)..."
          if (Test-Path -Path "{{.GUI_TRANSLATIONS_DIR}}" -PathType Directory) {
            foreach ($lang in '{{.LANGUAGES}}'.Split(' ')) {
              Write-Host "Extract Qt translations for $lang..."
              $ts_file = "{{.GUI_TRANSLATIONS_DIR}}/$lang.ts"
              if (-not (Test-Path -Path $ts_file -PathType Leaf)) {
                Set-Content -Path $ts_file -Value '<?xml version="1.0" encoding="utf-8"?><!DOCTYPE TS><TS version="2.1" language="'"$lang"'"></TS>'
              }
              $gui_files = Get-ChildItem -Path "{{.GUI_DIR}}" -Recurse -Filter "*.py" | Select-Object -ExpandProperty FullName
              hatch run pyside6-lupdate $gui_files -ts $ts_file
            }
          }
          else {
            Write-Host "Can't run GUI translations, the GUI directory is missing."
          }

        platforms: [windows]
        # yamllint enable

  compile-qt-translations:
    desc: Compile Qt translations
    cmds:
      # yamllint disable rule:indentation
      - cmd: |
          echo "Compiling Qt translations (.qm)..."
          if [ -d "{{.GUI_TRANSLATIONS_DIR}}" ]; then
            for lang in {{.LANGUAGES}}; do
              echo "Compile Qt translations for $lang..."
              ts_file="{{.GUI_TRANSLATIONS_DIR}}/${lang}.ts"
              qm_file="{{.GUI_TRANSLATIONS_DIR}}/${lang}.qm"
              if [ -f "${ts_file}" ]; then
                hatch run pyside6-lrelease "${ts_file}" -qm "${qm_file}"
              fi
              done
              hatch run pyside6-rcc "{{.GUI_DIR}}/resources.qrc" -o "{{.GUI_DIR}}/resources_rc.py"
              echo "All translations updated and compiled."
          else
              echo "Can't run GUI translations, there's no gui."
          fi

        platforms: [darwin, linux]
      - cmd: |
          if (Test-Path -Path "{{.GUI_TRANSLATIONS_DIR}}" -PathType Directory) {
            Write-Host "Compiling Qt translations (.qm)..."
            foreach ($lang in '{{.LANGUAGES}}'.Split(' ')) {
              Write-Host "Compile Qt translations for $lang..."
              $ts_file="{{.GUI_TRANSLATIONS_DIR}}/$lang.ts"
              $qm_file="{{.GUI_TRANSLATIONS_DIR}}/$lang.qm"
              if (Test-Path -Path $ts_file -PathType Leaf) {
                hatch run pyside6-lrelease "$ts_file" -qm "$qm_file"
              }
            }
            hatch run pyside6-rcc "{{.GUI_DIR}}/resources.qrc" -o "{{.GUI_DIR}}/resources_rc.py"
            Write-Host "All translations updated and compiled.
          else {
            Write-Host "Can't run GUI translations, the GUI directory is missing."
          }
        platforms: [windows]
        # yamllint enable

  extract-babel-translations:
    desc: Extract Babel translation strings
    cmds:
      # yamllint disable rule:indentation
      - cmd: |
          echo "Extracting Babel translation strings (.pot)..."
          mkdir -p "{{.LOCALES_DIR}}"
          pot_file="{{.LOCALES_DIR}}/{{.DOMAIN}}.pot"
          hatch run pybabel extract -k translate -k _translate_func -o $pot_file `find {{.SRC_DIR}} -name '*.py'`
        platforms: [darwin, linux]
      - cmd: |
          Write-Host "Extracting Babel translation strings (.pot)..."
          $pot_file="{{.LOCALES_DIR}}/{{.DOMAIN}}.pot"
          hatch run pybabel extract -k translate -k _translate_func -o $pot_file `find {{.SRC_DIR}} -name '*.py'`
        platforms: [windows]
        # yamllint enable

  compile-babel-translations:
    desc: Compile Babel translations
    cmds:
      # yamllint disable rule:indentation
      - cmd: |
          echo "Updating and compiling Babel translations (.po → .mo)..."
          for lang in {{.LANGUAGES}}; do
            echo "Processing language: ${lang}..."

            # Use proper variable expansion with curly braces for clarity.
            po_dir="{{.LOCALES_DIR}}/${lang}/LC_MESSAGES"
            po_file="${po_dir}/messages.po"
            pot_file="{{.LOCALES_DIR}}/{{.DOMAIN}}.pot"

            # Create the directory if it doesn't exist.
            mkdir -p "${po_dir}"

            # Check if the .po file already exists.
            # If it exists, update it. If not, initialize it.
            if [ -f "${po_file}" ]; then
              echo "Updating existing translation file for ${lang}..."
              hatch run pybabel update -i "${pot_file}" -d "${po_dir}" -l "${lang}"
            else
              echo "Initializing new translation file for ${lang}..."
              hatch run pybabel init -i "${pot_file}" -d "${po_dir}" -l "${lang}"
            fi

            # Compile the .po file into a .mo file.
            echo "Compiling translation file for ${lang}..."
            hatch run pybabel compile -d "${po_dir}" -l "${lang}"
          done
          echo "All translations updated and compiled."
          # yamllint enable rule: indentation
        platforms: [darwin, linux]
      - cmd: |
          # yamllint disable rule: indentation
          Write-Host "Updating and compiling Babel translations (.po → .mo)..."
          # PowerShell variables start with a single $.
          $languages = {{.LANGUAGES}}
          $localesDir = "{{.LOCALES_DIR}}"
          $domain = "{{.DOMAIN}}"

          foreach ($lang in '{{.LANGUAGES}}'.Split(' ')) {
            # Construct paths using join-path for robustness.
            $po_dir = Join-Path -Path $localesDir -ChildPath "$lang\LC_MESSAGES"
            $po_file = Join-Path -Path $po_dir -ChildPath "messages.po"
            $pot_file = Join-Path -Path $localesDir -ChildPath "$domain.pot"

            Write-Host "Processing language: $lang..."

            # Create the directory if it doesn't exist.
            if (-not (Test-Path -Path $po_dir)) {
                New-Item -ItemType Directory -Path $po_dir | Out-Null
            }

            # Check if the .po file already exists using Test-Path.
            if (Test-Path -Path $po_file) {
                Write-Host "Updating existing translation file for $lang..."
                hatch run pybabel update -i $pot_file -d $po_dir -l $lang
            }
            else {
                Write-Host "Initializing new translation file for $lang..."
                hatch run pybabel init -i $pot_file -d $po_dir -l $lang
            }

            # Compile the .po file into a .mo file.
            Write-Host "Compiling translation file for $lang..."
            hatch run pybabel compile -d $po_dir -l $lang
          }
          Write-Host "All translations updated and compiled."
          # yamllint enable rule: indentation
        platforms: [windows]
        # yamllint enable

  # ----------------------
  # Composite Translation Tasks
  # ----------------------
  translate-qt:
    desc: Extract & compile Qt translations
    cmds:
      - task: extract-qt-translations
      - task: compile-qt-translations

  translate-babel:
    desc: Extract & compile Babel translations
    cmds:
      - task: extract-babel-translations
      - task: compile-babel-translations

  translate-all:
    desc: Extract & compile all translations (Qt + Babel)
    cmds:
      - task: translate-qt
      - task: translate-babel
