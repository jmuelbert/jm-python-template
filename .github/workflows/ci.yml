---
# SPDX-License-Identifier: EUPL-1.2
# SPDX-FileCopyrightText: 2025-present Jürgen Mülbert <juergen.muelbert@outlook.de>

name: Core CI
run-name: "${{ github.event_name == 'workflow_dispatch' && format('CI: {0}', github.ref_name) || '' }}"
# yamllint disable-line rule:truthy
on:
  push:
    branches: [main, develop]
    paths:
      - src/**
      - pyproject.toml
      - .github/workflows/ci.yml
      - .github/actions/**
  pull_request:
    types: [opened, synchronize, reopened]

env:
  FORCE_COLOR: "1"
  PACKAGE_NAME: jm-python-template

defaults:
  run:
    shell: bash
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 🧐 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: ./.github/actions/python-setup
        id: python-setup
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node dependencies
        run: pnpm install
        # Installs the Go runtime environment. This is good practice for Go-based tools.
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22
          check-latest: true

      - name: Install dependencies
        run: pip install proselint

      - name: Run Proselint
        run: proselint ./*.md docs/*.md

      # Installs the Task binary. The v3 is important.
      - name: Install Task 🚀
        run: go install github.com/go-task/task/v3/cmd/task@latest

      # Runs the 'test' task from your Taskfile.yml
      - name: Run test task ▶️
        run: task lint
      - name: 🔍 Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          severity: CRITICAL,HIGH

  test:
    name: Test with ${{ matrix.os }}
    needs: lint-and-format
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: ./.github/actions/python-setup
        id: python-setup
      - name: ⚙️ Install Python dev env
        run: hatch env create test
      - name: 🧪 Run tests
        run: |
          hatch run test:coverage

      - name: 📢 Push Coverage Badge JSON
        run: bash .github/scripts/update-coverage-badge
        
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: update coverage badge"
          file_pattern: .github/badges/coverage.json
